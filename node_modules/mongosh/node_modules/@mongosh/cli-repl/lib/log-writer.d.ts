/// <reference types="node" />
import { Writable } from 'stream';
export interface MongoLogId {
    __value: number;
}
export declare function mongoLogId(id: number): MongoLogId;
export interface MongoLogEntry {
    t?: Date;
    s: 'F' | 'E' | 'W' | 'I' | 'D1' | 'D2' | 'D3' | 'D4' | 'D5';
    c: string;
    id: MongoLogId;
    ctx: string;
    msg: string;
    attr?: any;
}
export declare class MongoLogWriter extends Writable {
    _logId: string;
    _logFilePath: string | null;
    _target: Pick<Writable, 'write' | 'end'>;
    _now: () => Date;
    constructor(logId: string, logFilePath: string | null, target: Pick<Writable, 'write' | 'end'>, now?: () => Date);
    get logId(): string;
    get logFilePath(): string | null;
    _write(info: MongoLogEntry, encoding: unknown, callback: (err?: Error | null | undefined) => void): void;
    _final(callback: (err?: Error | null | undefined) => void): void;
    flush(): Promise<void>;
    info(component: string, id: MongoLogId, context: string, message: string, attr?: any): void;
    warn(component: string, id: MongoLogId, context: string, message: string, attr?: any): void;
    error(component: string, id: MongoLogId, context: string, message: string, attr?: any): void;
    fatal(component: string, id: MongoLogId, context: string, message: string, attr?: any): void;
}
interface MongoLogOptions {
    directory: string;
    retentionDays: number;
    onerror: (err: Error, path: string) => unknown | Promise<void>;
    onwarn: (err: Error, path: string) => unknown | Promise<void>;
}
export declare class MongoLogManager {
    _options: MongoLogOptions;
    constructor(options: MongoLogOptions);
    cleanupOldLogfiles(): Promise<void>;
    createLogWriter(): Promise<MongoLogWriter>;
}
export {};
